package com.liujc.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liujc.greendao.Bean.LTest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LTEST".
*/
public class LTestDao extends AbstractDao<LTest, Long> {

    public static final String TABLENAME = "LTEST";

    /**
     * Properties of entity LTest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Remark = new Property(2, String.class, "remark", false, "REMARK");
        public final static Property Remark2 = new Property(3, String.class, "remark2", false, "REMARK2");
        public final static Property Remark3 = new Property(4, String.class, "remark3", false, "REMARK3");
        public final static Property Remark4 = new Property(5, String.class, "remark4", false, "REMARK4");
    }


    public LTestDao(DaoConfig config) {
        super(config);
    }
    
    public LTestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LTEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"REMARK\" TEXT," + // 2: remark
                "\"REMARK2\" TEXT," + // 3: remark2
                "\"REMARK3\" TEXT," + // 4: remark3
                "\"REMARK4\" TEXT);"); // 5: remark4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LTEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LTest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(4, remark2);
        }
 
        String remark3 = entity.getRemark3();
        if (remark3 != null) {
            stmt.bindString(5, remark3);
        }
 
        String remark4 = entity.getRemark4();
        if (remark4 != null) {
            stmt.bindString(6, remark4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LTest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(4, remark2);
        }
 
        String remark3 = entity.getRemark3();
        if (remark3 != null) {
            stmt.bindString(5, remark3);
        }
 
        String remark4 = entity.getRemark4();
        if (remark4 != null) {
            stmt.bindString(6, remark4);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LTest readEntity(Cursor cursor, int offset) {
        LTest entity = new LTest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remark
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // remark4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LTest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark4(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LTest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LTest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LTest entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
